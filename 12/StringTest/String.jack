// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    field Array buffer;
    field int buffer_len;
    field int str_len;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) 
    {
	if( maxLength < 1 ) 
	{
            let maxLength = 1;
        }
        let buffer = Array.new(maxLength);
        let buffer_len = maxLength;
        let str_len = 0;
        return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() 
    {
	let buffer_len=0;
	let str_len=0;
	do Array.dispose(buffer);
        return;
    }

    /** Returns the current length of this String. */
    method int length() 
    {
	return str_len;
    }

    /** Returns the character at location j. */
    method char charAt(int j) 
    {
	return buffer[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) 
    {
	let buffer[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) 
    {
	if( str_len < buffer_len ) 
	{
            let buffer[str_len] = c;
            let str_len = str_len + 1;
        }
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() 
    {
	if( str_len > 0 ) 
	{
            let str_len = str_len - 1;
        }
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() 
    {
	var int i;
        var int retVal;
        var boolean isNeg;
        
        let isNeg = false;
        let retVal = 0;
        let i = 0;
        if(buffer[i] = 45) //45 is the ascii value of '-'
        {
            let isNeg = true;
            let i = i + 1;
        }
        while(i < str_len)
        {
            let retVal = (buffer[i] - 48) + (retVal * 10);
            let i = i + 1;
        }
        if(isNeg)
        {
            let retVal = retVal * -1;
        }
        return retVal;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) 
    {
	var int num;
        var boolean negative;
        let num = number;
        let str_len = 0;
        if(num < 0)
        {
            let num = num * -1;
            do appendChar(45); //45 is the ASCII value of '-'
        }
        do setIntWorker(num);
        return;
    }

    method void setIntWorker(int number)
    {
        var int lastChar;
        var int restOfNum;
        if(number = 0)
        {
            return;
        }
        let restOfNum = number / 10;
        let lastChar = number - (restOfNum * 10);
        do setIntWorker(restOfNum);
        do appendChar(lastChar + 48);
        return;
    }


    /** Returns the new line character. */
    function char newLine() 
    {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() 
    {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() 
    {
	return 34;
    }
}

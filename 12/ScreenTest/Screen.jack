// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() 
    {
        let screen = 16384;
        let color = true;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() 
    {
        var int i;
        let i = 0;
        while( i < 8192 ) 
        {
            let screen[i] = false;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) 
    {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) 
    {
        var int address;
        var int mask;
        var int temp;
        let mask = 1;
        let address = (y*32) + (x/16);
        let temp = x & 15;
        while(temp > 0)
        {
            let mask = mask + mask;
            let temp = temp - 1;
        }
        if( color ) 
        {
            let screen[address] = screen[address] | mask;
        }
        else 
        {
            let screen[address] = screen[address] & ~mask;
        }

        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) 
    {
        var int dx, dy;
        var int temp;
        
        // Make sure x2 > x1
        // else change the two points
        if( x1 > x2 ) 
        {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        
        if( dx = 0 ) 
        {
            do Screen.vertical_line( x1, y1, y2 );
        }
        else 
        { 
            if( dy = 0 ) 
            {
                do Screen.horizon_line( x1, x2, y1 );
            }
            else 
            {
                do Screen.other_line( x1, y1, x2, y2, dx, dy );
            }
        }
        return;
    }

    function void other_line( int x1, int y1, int x2, int y2, int dx, int dy ) 
    {
        var int a, b;
        var int i, flag;

        let a = 0;
        let b = 0;
        let i = 0;
        
        if( dy < 0 ) 
        {
            let flag = -1;
        }
        else 
        {
            let flag = 1;
        }

        while( ~(a > dx) & (((flag = 1) & ~(b > dy)) | ((flag = -1) & ~(b < dy))) ) 
        {
            do Screen.drawPixel( x1+a, y1+b );
            if( i < 0 ) 
            {
                let a = a + 1;
                let i = i + (dy * flag);
            }
            else 
            {
                let b = b + flag;
                let i = i - dx;
            }
        }
        return;
    }

    function void vertical_line( int x, int y1, int y2 ) 
    {
        var int temp;
        
        if( y1 > y2 ) 
        {
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        while( ~(y1 > y2) ) 
        {
            do Screen.drawPixel( x, y1 );
            let y1 = y1 + 1;
        }
        return;
    }
    
    function void horizon_line( int x1, int x2, int y ) 
    {
        var int begin, end;
        var int flagx1, flagx2;
        
        let flagx1 = x1 & 15;
        let flagx2 = x2 & 15;
        let begin = (y*32) + (x1/16);
        let end = (y*32) + (x2/16) + (flagx2=0);

        if( begin = end ) 
        {   
            do Screen.draw_short_horizontal_line( x1, x2, y );
        }
        else 
        { 
            if( ~(flagx1 = 0) ) 
            {      
                let begin = begin + 1;
                do Screen.draw_short_horizontal_line( x1, x1+16-flagx1, y );
            }
            if( ~(flagx2 = 0) ) 
            {   
                let end = end - 1;
                do Screen.draw_short_horizontal_line( x2-flagx2, x2, y );
            }
            while( ~(begin > end) ) 
            {   
                let screen[begin] = color;
                let begin = begin + 1;
            }
        }
        
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
    {
        var int number;
        let number = y1;
        while(number < y2)
        {
            do Screen.drawLine(x1, number, x2, number);
            let number = number + 1;
        }
        return;
    }

    function void draw_short_horizontal_line( int x1, int x2, int y ) 
    {
        while( ~(x1 > x2) ) 
        {
            do Screen.drawPixel( x1, y );
            let x1 = x1 + 1;
        }
    
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) 
    {
        var int dx, dy;
        var int r2;
        
        let dy = -r;
        let r2 = r*r;
        while( ~(dy > r) ) 
        {
            let dx = Math.sqrt(r2-(dy*dy));
            do Screen.horizon_line( cx-dx, cx+dx, cy+dy );
            let dy = dy + 1;
        }
        return;
    }
}

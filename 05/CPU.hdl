// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// Put your code here:
	//      0  v  v  v  v  v  v  v  v  v  v  v  v  v  v  v
	//      1  1  1  a  c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
	//               M    (A    L    U)   A  D  M  <  =  >
	//      15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00

	//Decode
	And(a=instruction[12],b=instruction[15],out=a1);
	And(a=instruction[11],b=instruction[15],out=c1);
	And(a=instruction[10],b=instruction[15],out=c2);
	And(a=instruction[9],b=instruction[15],out=c3);
	And(a=instruction[8],b=instruction[15],out=c4);
	And(a=instruction[7],b=instruction[15],out=c5);
	And(a=instruction[6],b=instruction[15],out=c6);
	And(a=instruction[5],b=instruction[15],out=d1);
	And(a=instruction[4],b=instruction[15],out=d2);
	And(a=instruction[3],b=instruction[15],out=d3);
	And(a=instruction[2],b=instruction[15],out=j1);
	And(a=instruction[1],b=instruction[15],out=j2);
	And(a=instruction[0],b=instruction[15],out=j3);

	//Set the A-register data or address, decided by MSB 
	Mux16(a=instruction,b=outALU,sel=instruction[15],out=inA);
	
	//Set A-register if it is a A-instruction or d1=1 
	Not(in=instruction[15],out=loadA1);
	Or(a=loadA1,b=d1,out=loadA);
	ARegister(in=inA,load=loadA,out=outA);
	
	//Set ALU input A or M, decided by a(instruction[12])
	Mux16(a=outA,b=inM,sel=a1,out=outAM);
	
	//Set the addressM by the output of A-register
	And16(a=outA,b=true,out[0..14]=addressM);
	
	//Set the D-register
	DRegister(in=outALU,load=d2,out=outD);
	
	//Set the ALU
ALU(x=outD,y=outAM,zx=c1,nx=c2,zy=c3,ny=c4,f=c5,no=c6,out=outALU,out=outM,zr=zr,ng=ng);
	
	//Set Jumper
	DMux8Way(in=true,sel[0]=j3,sel[1]=j2,sel[2]=j1,a=k1,b=k2,c=k3,d=k4,e=k5,f=k6,g=k7,h=k8);
	Not(in=ng,out=nng);
	Not(in=zr,out=nzr);
	//>0
	And(a=nng,b=nzr,out=k21);
	And(a=k2,b=k21,out=k22);
	//=0
	And(a=nng,b=zr,out=k31);
	And(a=k3,b=k31,out=k32);
	//>=0;
	Or(a=nng,b=zr,out=k41);
	And(a=k41,b=k4,out=k42);
	//<0
	And(a=ng,b=nzr,out=k51);
	And(a=k51,b=k5,out=k52);
	//<>0
	And(a=nzr,b=k6,out=k62);
	//<=0
	Or(a=ng,b=zr,out=k71);
	And(a=k71,b=k7,out=k72);
    
	//combine the them together
	Or8Way(in[0]=k22,in[1]=k32,in[2]=k42,in[3]=k52,in[4]=k62,in[5]=k72,in[6]=k8,in[7]=false,out=loadpc);


	//Set the PC (whether to load with reg-A or inc)
	Not(in=loadpc,out=inc1);
	PC(in=outA,inc=inc1,load=loadpc,reset=reset,out[0..14]=pc);
    
	//Set outputs for writing memory
	And(a=d3,b=true,out=writeM);







}